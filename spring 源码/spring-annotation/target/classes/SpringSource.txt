Spring容器refresh()【创建刷新】
1、prepareRefresh()刷新前的预处理工作;
    1)、initPropertySources() 初始化一些属性设置;子类自定义个性化的属性设置方法;
    2)、 getEnvironment().validateRequiredProperties() 检验属性的合法
    3)、this.earlyApplicationEvents = new LinkedHashSet<>(); 保存容器中的一些早期的事件;
2、ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()获取BeanFactory
    1)、refreshBeanFactory()刷新[创建]BeanFactory
            创建一个this.beanFactory = new DefaultListableBeanFactory();
            设置id;
    2)、getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象;
    3)、将创建的BeanFactory[DefaultListableBeanFactory]返回;
3、prepareBeanFactory(beanFactory);BeanFactory的预准备工作(BeanFactory进行一些设置)
    1)、设置BeanFactory的类加载器、支持表达式解析器...
    2)、添加部分BeanPostProcessor[ApplicationContextAwareProcessor]
    3)、设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware、...;
    4)、注册可以解析的自动装配;我们能直接在任何组组件中自动注入:
        BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    5)、添加BeanPostProcessor[ApplicationListenerDetector]
    6)、添加编译时的AspectJ支持
    7)、给BeanFactory中注册一些能用的组件
        environment[ConfigurableEnvironment]、
        systemProperties[Map<String,Object>]、
        systemEnvironment[Map<String,Object>]、
4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作
    1)、子类通过重写这个方法来在BeanFactory创建并与准备完成以后做进一步的设置
=============================================以上是BeanFactory的创建及预准备工作==========================================
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor;
    BeanFactoryPostProcessor;BeanFactory的后置处理器.在BeanFactory准备
    两个接口: BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
    1)、执行BeanFactoryPostProcessor的方法;
       1)、获取所有的BeanDefinitionRegistryPostProcessor
       2)、看先执行实现了PriorityOrdered、优先级排序接口的BeanDefinitionRegistryPostProcessor、
            postProcessor.postProcessBeanDefinitionRegistry(registry);
       3)、在执行实现Ordered顺序接口的BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);
       4)、最后执行没有实现任何优先级或者顺序接口的BeanDefinitionRegistryPostProcessor;
            postProcessor.postProcessBeanDefinitionRegistry(registry);

       再执行BeanFactoryPostProcessor方法
       1)、获取所有的postProcessor.postProcessBeanFactory(beanFactory);
       2)、看先执行实现了PriorityOrdered、优先级排序接口的BeanFactoryPostProcessor;
            postProcessor.postProcessBeanFactory(beanFactory);
       3)、在执行实现Ordered顺序接口的BeanFactoryPostProcessor;
            postProcessor.postProcessBeanFactory(beanFactory);
       4)、最后执行没有实现任何优先级或者顺序接口的BeanFactoryPostProcessor;
            postProcessor.postProcessBeanFactory(beanFactory);
6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor(Bean的后置处理器)[intercept bean creation]
    不通接口类型BeanPostProcessor;在Bean创建前后的执行时机是不一样的
    BeanPostProcessor、
    DestructionAwareBeanPostProcessor、
    InstantiationAwareBeanPostProcessor、
    SmartInstantiationAwareBeanPostProcessor、
    MergedBeanDefinitionPostProcessor
    1)、获取所有的BeanPostProcessor;后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级排序
    2)、先注册PriorityOrdered优先级接口的BeanPostProcessor;
        把每一个BeanPostProcessor;添加到BeanFactory中
        beanFactory.addBeanPostProcessor(postProcessor);
    3)、在注册Ordered接口的
    4)、最后注册没有事先任何优先级接口的
    5)、最终注册MergedBeanDefinitionPostProcessor
    6)、注册一个ApplicationListenerDetector;来在Bean创建完成后检查是否是ApplicationListener,如果是
        this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);
7、initMessageSource();初始化MessageSource组件(做国际化功能;消息绑定,消息解析)
    1)、先获取BeanFactory
    2)、看容器中是否有id为messageSource的,类型为MessageSource的组件
        如果有赋值给messageSource,如果没有自己创建一个new DelegatingMessageSource();
            MessageSource:去除国际化配置文件中的某个key的值;能你找区域信息获取
    3)、把创建好的MessageSource注册到容器中,以后获取国际化配置文件的值的时候,可以自动注入MessageSource;
        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
        String getMessage(String code, @Nullable Object[] args, Locale locale)
8、initApplicationEventMulticaster();初始化事件派发器
    1)、获取BeanFactory
    2)、从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster
    3)、如果上一步没有配置;创建一个new SimpleApplicationEventMulticaster(beanFactory);
    4)、将创建的ApplicationEventMulticaster添加到BeanFactory中,以后其他组件直接自动注入
9、onRefresh();留给子容器(子类)
    1)、子类重写这个方法,在容器刷新的时候可以自定义逻辑
10、registerListeners();给容器中将所有项目里面的ApplicationListener注册进来
    1)、从容器中拿到所有的ApplicationListener组件
    2)、将每个监听器添加到事件派发器中;
        getApplicationEventMulticaster().addApplicationListener(listener);
    3)、派发之前步骤产生的事件
11、finishBeanFactoryInitialization(beanFactory);初始化所有的单实例bean
    1)、获取容器中的所有Bean,依次进行初始化和创建对象
    2)、获取Bean的定义信息;RootBeanDefinition
    3)、Bean不是抽象的,是单实例的,不是懒加载的
        1)、判断是否是FactoryBean; 是否是实现FactoryBean接口的Bean
        2)、不是工厂Bean.利用getBean(beanName);创建对象


